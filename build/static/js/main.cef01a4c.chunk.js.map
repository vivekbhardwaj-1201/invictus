{"version":3,"sources":["Count.js","Frequency.js","App.js","serviceWorker.js","index.js"],"names":["Count","sentence","n","console","log","document","writeln","replace","toLowerCase","getCharacter","counter","actualLength","noOfCount","noOfCountsOfEachCharacter","length","charAt","result","Object","keys","sort","a","b","write","Frequency","props","add","setState","render","state","changeNumber","event","target","value","preventDefault","inputRef","React","createRef","bind","axios","get","then","response","data","catch","error","this","current","focus","type","min","max","placeholder","ref","onChange","onClick","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uSAyCeA,MAvCf,YACC,IADgBC,EACjB,EADiBA,SAAUC,EAC3B,EAD2BA,EAExBC,QAAQC,IAAIF,GACXG,SAASC,QAAQ,+GAEjBL,GADAA,EAAWA,EAASM,QAAQ,UAAW,KACnBC,cACpB,IACIC,EAAcC,EAASC,EAAcC,EADrCC,EAA4B,GAElC,IACEH,EAAU,EAAGC,EAAeV,EAASa,OACrCJ,EAAUC,IACRD,GAEFD,EAAeR,EAASc,OAAOL,KAEX,KAAOD,EAAe,MACxCG,EAAYC,EAA0BJ,IACxCI,EAA0BJ,GAAgBG,EAAYA,EAAY,EAAI,EAExE,IAAII,EAASC,OAAOC,KAAKL,GAA2BM,MAAK,SAASC,EAAGC,GACrE,OAAOR,EAA0BQ,GAAKR,EAA0BO,MAKhE,IAHCf,SAASiB,MAAM,kDAEhBnB,QAAQC,WAAWS,GACdH,EAAU,EAAGA,EAAUR,IAAKQ,EAE/BL,SAASiB,MAAM,WAAaN,EAAON,GAAW,SAC9CL,SAASiB,MAAM,OAAQT,EAA0BG,EAAON,IAAY,cAKvE,OAHCL,SAASiB,MAAM,YACfnB,QAAQC,IAAIS,GACZV,QAAQC,IAAIY,GAEX,uDCkBYO,E,kDAjDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,IAAM,WACJ,EAAKC,SAAS,CAAEC,QAAS,EAAKC,MAAMD,UAXnB,EAcnBE,aAAe,SAACC,GACd,EAAKJ,SAAS,CACZxB,EAAG4B,EAAMC,OAAOC,QAElBF,EAAMG,kBAhBN,EAAKC,SAAWC,IAAMC,YACrB,EAAKR,MAAQ,CACV3B,SAAS,mBACVC,EAAG,EACJyB,QAAQ,GAEV,EAAKE,aAAc,EAAKA,aAAaQ,KAAlB,gBARF,E,gEAqBM,IAAD,OAClBC,IAAMC,IAAI,sEACLC,MAAK,SAAAC,GACFtC,QAAQC,IAAIqC,GACZ,EAAKf,SAAS,CAACzB,SAASwC,EAASC,UAEpCC,OAAM,SAAAC,GACPzC,QAAQC,IAAIwC,MAEhBC,KAAKX,SAASY,QAAQC,U,+BAGlB,IAAD,OACT,OACE,6BACI,2EACA,+CACA,2BAAOC,KAAK,SAASC,IAAI,IAAIC,IAAI,KAAKC,YAAY,gBAAgBC,IAAKP,KAAKX,SAAUF,MAAOa,KAAKjB,MAAM1B,EAAGmD,SAAUR,KAAKhB,eAC1H,4BAAQmB,KAAK,SAASM,QAAS,kBAAM,EAAK7B,QAA1C,YACCoB,KAAKjB,MAAMD,QACZ,kBAAC,EAAD,CAAO1B,SAAU4C,KAAKjB,MAAM3B,SAAUC,EAAG2C,KAAKjB,MAAM1B,IAErDC,QAAQC,IAAIyC,KAAKjB,MAAM1B,Q,GA5CNqD,aCSTC,MARf,WACE,OACE,yBAAKC,UAAU,OACd,kBAAC,EAAD,QCIeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASpC,OACP,kBAAC,IAAMqC,WAAP,KACE,kBAAC,EAAD,OAEF3D,SAAS4D,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAM2B,c","file":"static/js/main.cef01a4c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Count({ sentence, n })//Destructuring recieved props\r\n{\r\n   console.log(n)\r\n    document.writeln('<div style=\"text-align:center; color:blue; font-size:30px; margin-bottom:20px;\">Frequency Of elements</div>')\r\n    sentence = sentence.replace(/[^a-z]/g, '');//Removing all the characters except alphabets\r\n    sentence = sentence.toLowerCase();//Converting all the alphabets to lowercase\r\n    var noOfCountsOfEachCharacter = {};// To keep the count of no of occurences of elements\r\n    var getCharacter, counter, actualLength, noOfCount;\r\n  for (\r\n    counter = 0, actualLength = sentence.length;\r\n    counter < actualLength;\r\n    ++counter\r\n  ) {\r\n    getCharacter = sentence.charAt(counter);\r\n    //   if (!isNaN(getCharacter)) continue;\r\n    if (getCharacter >= 'a' && getCharacter < 'z')\r\n      noOfCount = noOfCountsOfEachCharacter[getCharacter];\r\n    noOfCountsOfEachCharacter[getCharacter] = noOfCount ? noOfCount + 1 : 1;\r\n  }\r\n  var result = Object.keys(noOfCountsOfEachCharacter).sort(function(a, b) {\r\n  return noOfCountsOfEachCharacter[b] - noOfCountsOfEachCharacter[a];\r\n})\r\n   document.write('<table border=\"3\" width=\"200\" align=\"center\" >')\r\n   //Printing all frequencies in alphabetical order\r\n  console.log(typeof noOfCountsOfEachCharacter)\r\n  for (counter = 0; counter < n; ++counter){\r\n    // var sortChar = lowerAlph[counter];\r\n    document.write(\"<tr><td>\" + result[counter] + \"</td>\")\r\n    document.write(\"<td>\" +noOfCountsOfEachCharacter[result[counter] ]+ \"</td></tr>\")\r\n  }\r\n  document.write('</table>')\r\n  console.log(noOfCountsOfEachCharacter)\r\n  console.log(result)\r\n return (\r\n   <div>\r\n     Frequency of elements\r\n      </div>\r\n  );\r\n}\r\nexport default Count;\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nimport Count from './Count'\r\n// import ClassFreq from './ClassFreq'\r\nclass Frequency extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.inputRef = React.createRef()\r\n     this.state = {\r\n        sentence:'Vivek is my name',\r\n       n: 5,\r\n      render: false \r\n    }\r\n    this.changeNumber= this.changeNumber.bind(this);\r\n  }\r\n  add = () => {\r\n    this.setState({ render: !this.state.render })\r\n  }\r\n  //setting user enetered value of state n\r\n  changeNumber = (event) => {\r\n    this.setState({\r\n      n: event.target.value\r\n    })\r\n    event.preventDefault()\r\n  }\r\n// Fetching Data using axios\r\n      componentDidMount() {\r\n        axios.get('https://raw.githubusercontent.com/invictustech/test/main/README.md')\r\n            .then(response => {\r\n                console.log(response)\r\n                this.setState({sentence:response.data})\r\n            })\r\n            .catch(error => {\r\n            console.log(error)\r\n        })\r\n        this.inputRef.current.focus()\r\n  }\r\n  \r\n  render() {\r\n  return (\r\n    <div>\r\n        <h1>Count Frequency Of Top N occurring Elements</h1>\r\n        <label>Enter Number</label>\r\n        <input type='number' min=\"1\" max=\"26\" placeholder='Enter Here...' ref={this.inputRef} value={this.state.n} onChange={this.changeNumber}></input>\r\n        <button type='submit' onClick={() => this.add()}>Click me</button>\r\n       { this.state.render &&\r\n        <Count sentence={this.state.sentence} n={this.state.n} />\r\n     }\r\n      {console.log(this.state.n)}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Frequency","import React from 'react'\n//import logo from './logo.svg';\nimport './App.css';\n// import Count from './Count';\nimport Frequency from './Frequency.js'\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Frequency/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n // for (getCharacter in noOfCountsOfEachCharacter) {\n  //     if (getCharacter !== \" \") {\n  //         document.writeln(\"<tr><td>\" + getCharacter + \"</td>\")\n  //         document.writeln(\"<td>\" + noOfCountsOfEachCharacter[getCharacter] + \"</td></tr>\")\n  //   }\n  //   }"],"sourceRoot":""}